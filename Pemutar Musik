#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

class Node {
public:
    string nama_artis;
    vector<string> lagu;
    Node* left;
    Node* right;
    
    Node(string nama_artis) {
        this->nama_artis = nama_artis;
        this->left = nullptr;
        this->right = nullptr;
    }
};

class Tree {
public:
    Node* root;
    
    Tree() {
        root = nullptr;
    }

    void insert(string nama_artis, string judul_lagu) {
        if (!root) {
            root = new Node(nama_artis);
            root->lagu.push_back(judul_lagu);
        } else {
            _insert_recursive(root, nama_artis, judul_lagu);
        }
    }

    void _insert_recursive(Node* node, string nama_artis, string judul_lagu) {
        if (nama_artis < node->nama_artis) {
            if (node->left == nullptr) {
                node->left = new Node(nama_artis);
                node->left->lagu.push_back(judul_lagu);
            } else {
                _insert_recursive(node->left, nama_artis, judul_lagu);
            }
        } else if (nama_artis > node->nama_artis) {
            if (node->right == nullptr) {
                node->right = new Node(nama_artis);
                node->right->lagu.push_back(judul_lagu);
            } else {
                _insert_recursive(node->right, nama_artis, judul_lagu);
            }
        } else {
            if (find(node->lagu.begin(), node->lagu.end(), judul_lagu) == node->lagu.end()) {
                node->lagu.push_back(judul_lagu);
            }
        }
    }

    vector<string> cari_lagu_berdasarkan_artis(string nama_artis) {
        return _cari_artis_recursive(root, nama_artis);
    }

    vector<string> _cari_artis_recursive(Node* node, string nama_artis) {
        if (node == nullptr) {
            return {};
        }

        if (nama_artis == node->nama_artis) {
            return node->lagu;
        }

        if (nama_artis < node->nama_artis) {
            return _cari_artis_recursive(node->left, nama_artis);
        } else {
            return _cari_artis_recursive(node->right, nama_artis);
        }
    }

    void preorder_traversal(Node* node, vector<pair<string, vector<string>>>& hasil) {
        if (node) {
            hasil.push_back(make_pair(node->nama_artis, node->lagu));
            preorder_traversal(node->left, hasil);
            preorder_traversal(node->right, hasil);
        }
    }

    vector<pair<string, vector<string>>> preorder_traversal() {
        vector<pair<string, vector<string>>> hasil;
        preorder_traversal(root, hasil);
        return hasil;
    }
};

bool kmp_search(string text, string pattern) {
    if (pattern.empty()) return true;
    int n = text.length();
    int m = pattern.length();
    vector<int> lps(m, 0);

    int length = 0, i = 1;

    while (i < m) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }

    i = 0;
    int j = 0;
    while (i < n) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == m) {
            return true;
        } else if (i < n && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    return false;
}

vector<string> insertion_sort(vector<string>& arr) {
    for (int i = 1; i < arr.size(); i++) {
        string key = arr[i];
        int j = i - 1;
        while (j >= 0 && key < arr[j]) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
    return arr;
}

void main_menu(Tree& koleksi_musik) {
    vector<string> daftar_lagu_terputar;
    while (true) {
        cout << "\n" << string(50, '=') << endl;
        cout << string(15, ' ') << "PROGRAM PEMUTAR MUSIK" << endl;
        cout << string(50, '=') << endl;
        cout << "\nMenu Utama:" << endl;
        cout << "  1. Putar lagu" << endl;
        cout << "  2. Keluar dari Program" << endl;
        cout << string(50, '-') << endl;
        string pilihan;
        cout << "Pilihan Anda: ";
        cin >> pilihan;

        if (pilihan == "1") {
            cout << "\n" << string(50, '=') << endl;
            cout << string(15, ' ') << "MENU PENCARIAN LAGU" << endl;
            cout << string(50, '=') << endl;
            cout << "\nCari lagu berdasarkan:" << endl;
            cout << "  1. Nama lagu" << endl;
            cout << "  2. Artis" << endl;
            cout << string(50, '-') << endl;

            string pilihan_cari;
            cout << "Pilihan Anda: ";
            cin >> pilihan_cari;

            if (pilihan_cari == "1") {
                string nama_lagu;
                cout << "Masukkan nama lagu: ";
                cin.ignore();
                getline(cin, nama_lagu);

                vector<pair<string, string>> daftar_artis_lagu;
                auto traversal = koleksi_musik.preorder_traversal();
                for (const auto& pair : traversal) {
                    for (const string& lagu : pair.second) {
                        if (kmp_search(lagu, nama_lagu)) {
                            daftar_artis_lagu.push_back(make_pair(pair.first, lagu));
                        }
                    }
                }

                if (!daftar_artis_lagu.empty()) {
                    cout << "\n" << string(50, '-') << endl;
                    cout << string(10, ' ') << "HASIL PENCARIAN LAGU" << endl;
                    cout << string(50, '-') << endl;
                    for (size_t i = 0; i < daftar_artis_lagu.size(); ++i) {
                        cout << "  " << i + 1 << ". " << daftar_artis_lagu[i].second << " - " << daftar_artis_lagu[i].first << endl;
                    }
                    cout << string(50, '-') << endl;
                } else {
                    cout << "\n Tidak ditemukan lagu dengan nama tersebut." << endl;
                }
            } else if (pilihan_cari == "2") {
                string nama_artis;
                cout << "Masukkan nama artis: ";
                cin.ignore();
                getline(cin, nama_artis);

                vector<string> artis_ditemukan;
                auto traversal = koleksi_musik.preorder_traversal();
                for (const auto& pair : traversal) {
                    if (kmp_search(pair.first, nama_artis)) {
                        artis_ditemukan.push_back(pair.first);
                    }
                }

                if (!artis_ditemukan.empty()) {
                    artis_ditemukan = insertion_sort(artis_ditemukan);
                    cout << "\n" << string(50, '-') << endl;
                    cout << string(10, ' ') << "ARTIS YANG DITEMUKAN" << endl;
                    cout << string(50, '-') << endl;
                    for (size_t i = 0; i < artis_ditemukan.size(); ++i) {
                        cout << "  " << i + 1 << ". " << artis_ditemukan[i] << endl;
                    }
                    cout << string(50, '-') << endl;
                } else {
                    cout << "\n Artis tidak ditemukan." << endl;
                }
            } else {
                cout << "Pilihan tidak valid." << endl;
            }
        } else if (pilihan == "2") {
            cout << "\n" << string(50, '=') << endl;
            cout << string(5, ' ') << "TERIMA KASIH TELAH MENGGUNAKAN PROGRAM" << endl;
            cout << string(15, ' ') << "PEMUTAR MUSIK" << endl;
            cout << string(50, '=') << endl;
            break;
        } else {
            cout << "\n Pilihan tidak valid. Silakan coba lagi." << endl;
        }
    }
}

int main() {
    Tree koleksi_musik;
    
    koleksi_musik.insert("Reality Club", "Anything You Want");
    koleksi_musik.insert("Reality Club", "Am I Bothering You?");
    koleksi_musik.insert("ABBA", "Dancing Queen");
    koleksi_musik.insert("Queen", "Bohemian Rhapsody");
    koleksi_musik.insert("Sheila on 7", "Sephia");

    main_menu(koleksi_musik);
    
    return 0;
}
