class Node:
    def __init__(self, nama_artis=None):
        self.nama_artis = nama_artis
        self.lagu = []
        self.left = None
        self.right = None

class Tree:
    def __init__(self):
        self.root = None
    
    def insert(self, nama_artis, judul_lagu):
        if not self.root:
            self.root = Node(nama_artis)
            self.root.lagu.append(judul_lagu)
        else:
            self._insert_recursive(self.root, nama_artis, judul_lagu)
    
    def _insert_recursive(self, node, nama_artis, judul_lagu):
        if nama_artis < node.nama_artis:
            if node.left is None:
                node.left = Node(nama_artis)
                node.left.lagu.append(judul_lagu)
            else:
                self._insert_recursive(node.left, nama_artis, judul_lagu)
        elif nama_artis > node.nama_artis:
            if node.right is None:
                node.right = Node(nama_artis)
                node.right.lagu.append(judul_lagu)
            else:
                self._insert_recursive(node.right, nama_artis, judul_lagu)
        else:
            # Artis sudah ada, tambahkan lagu ke daftar lagunya
            if judul_lagu not in node.lagu:
                node.lagu.append(judul_lagu)
    
    def cari_lagu_berdasarkan_artis(self, nama_artis):
        return self._cari_artis_recursive(self.root, nama_artis)
    
    def _cari_artis_recursive(self, node, nama_artis):
        if node is None:
            return []
        
        if nama_artis == node.nama_artis:
            return node.lagu
        
        if nama_artis < node.nama_artis:
            return self._cari_artis_recursive(node.left, nama_artis)
        else:
            return self._cari_artis_recursive(node.right, nama_artis)
    
    def preorder_traversal(self):
        hasil = []
        self._preorder_recursive(self.root, hasil)
        return hasil
    
    def _preorder_recursive(self, node, hasil):
        if node:
            # Proses node saat ini
            hasil.append((node.nama_artis, node.lagu))
            # Kunjungi subtree kiri
            self._preorder_recursive(node.left, hasil)
            # Kunjungi subtree kanan
            self._preorder_recursive(node.right, hasil)

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def compute_lps(pattern):
    m = len(pattern)
    lps = [0] * m
    
    length = 0
    i = 1
    
    while i < m:
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1
    
    return lps

def kmp_search(text, pattern):
    if not pattern:
        return True  # Empty pattern matches everything
    
    n = len(text)
    m = len(pattern)
    
    # Normalisasi teks dan pola ke huruf kecil untuk pencarian case-insensitive
    text_lower = text.lower()
    pattern_lower = pattern.lower()
    
    lps = compute_lps(pattern_lower)
    
    i = 0  # index untuk text
    j = 0  # index untuk pattern
    
    while i < n:
        if pattern_lower[j] == text_lower[i]:
            i += 1
            j += 1
        
        if j == m:
            return True
        elif i < n and pattern_lower[j] != text_lower[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    
    return False

def main():
    # Inisialisasi koleksi musik dengan tree
    koleksi_musik = Tree()
    
    # Tambahkan lagu dan artis baru sesuai permintaan
    # 1. Reality Club
    koleksi_musik.insert("Reality Club", "Anything You Want")
    koleksi_musik.insert("Reality Club", "Am I Bothering You?")
    koleksi_musik.insert("Reality Club", "Telenovia")
    koleksi_musik.insert("Reality Club", "2112")
    koleksi_musik.insert("Reality Club", "Is it the answer")
    
    # 2. ABBA
    koleksi_musik.insert("ABBA", "Dancing Queen")
    koleksi_musik.insert("ABBA", "Slipping Trough My Fingers")
    koleksi_musik.insert("ABBA", "Lay All Your Love On Me")
    koleksi_musik.insert("ABBA", "Money,Money,Money")
    koleksi_musik.insert("ABBA", "The Winner Takes It All")
    
    # 3. Queen
    koleksi_musik.insert("Queen", "Don't Stop Me Know")
    koleksi_musik.insert("Queen", "Bohemian Rhapsody")
    koleksi_musik.insert("Queen", "Under Pressure")
    koleksi_musik.insert("Queen", "Killer Queen")
    koleksi_musik.insert("Queen", "Somebody to Love")
    
    # 4. Sheila on 7
    koleksi_musik.insert("Sheila on 7", "Sebuah kisah klasik")
    koleksi_musik.insert("Sheila on 7", "Pemuja rahasia")
    koleksi_musik.insert("Sheila on 7", "Kita")
    koleksi_musik.insert("Sheila on 7", "Film favorit")
    koleksi_musik.insert("Sheila on 7", "Sephia")
    
    daftar_lagu_terputar = []
    
    while True:
        print("\n" + "="*50)
        print(" "*15 + "PROGRAM PEMUTAR MUSIK")
        print("="*50)
        print("\nMenu Utama:")
        print("  1. Putar lagu")
        print("  2. Keluar dari Program")
        print("-"*50)
        
        pilihan = input("Pilihan Anda: ")
        
        if pilihan == "1":
            print("\n" + "="*50)
            print(" "*15 + "MENU PENCARIAN LAGU")
            print("="*50)
            print("\nCari lagu berdasarkan:")
            print("  1. Nama lagu")
            print("  2. Artis")
            print("-"*50)
            
            pilihan_cari = input("Pilihan Anda: ")
            
            if pilihan_cari == "1":
                nama_lagu = input("Masukkan nama lagu: ")
                
                # Mencari lagu berdasarkan nama menggunakan KMP
                daftar_artis_lagu = []
                for artis, lagu_list in koleksi_musik.preorder_traversal():
                    for lagu in lagu_list:
                        if kmp_search(lagu, nama_lagu):
                            daftar_artis_lagu.append((artis, lagu))
                
                if daftar_artis_lagu:
                    print("\n" + "-"*50)
                    print(" "*10 + "HASIL PENCARIAN LAGU")
                    print("-"*50)
                    for i, (artis, lagu) in enumerate(daftar_artis_lagu, 1):
                        print(f"  {i}. {lagu} - {artis}")
                    print("-"*50)
                    
                    indeks = int(input("Pilih lagu (nomor): ")) - 1
                    if 0 <= indeks < len(daftar_artis_lagu):
                        lagu_dipilih = daftar_artis_lagu[indeks][1]
                        artis_dipilih = daftar_artis_lagu[indeks][0]
                        print("\n" + "*"*50)
                        print(f"  ▶ Memutar: {lagu_dipilih}")
                        print(f"    Artis  : {artis_dipilih}")
                        print("*"*50)
                        daftar_lagu_terputar.append(f"{lagu_dipilih} - {artis_dipilih}")
                    else:
                        print("\n❌ Pilihan tidak valid.")
                else:
                    print("\n❌ Tidak ditemukan lagu dengan nama tersebut.")
                    pilih_putar_lagi = input("Apakah ingin memutar lagu lain? (ya/tidak): ")
                    if pilih_putar_lagi.lower() != "ya":
                        continue
            
            elif pilihan_cari == "2":
                nama_artis = input("Masukkan nama artis: ")
                
                # Mencari artis menggunakan KMP
                artis_ditemukan = []
                for artis, _ in koleksi_musik.preorder_traversal():
                    if kmp_search(artis, nama_artis):
                        artis_ditemukan.append(artis)
                
                if artis_ditemukan:
                    # Sorting artis menggunakan insertion sort
                    artis_sorted = insertion_sort(artis_ditemukan)
                    
                    print("\n" + "-"*50)
                    print(" "*10 + "ARTIS YANG DITEMUKAN")
                    print("-"*50)
                    for i, artis in enumerate(artis_sorted[:5], 1):  # Tampilkan maksimal 5 artis
                        print(f"  {i}. {artis}")
                    print("-"*50)
                    
                    indeks = int(input("Pilih artis (nomor): ")) - 1
                    if 0 <= indeks < len(artis_sorted[:5]):
                        artis_dipilih = artis_sorted[indeks]
                        lagu_artis = koleksi_musik.cari_lagu_berdasarkan_artis(artis_dipilih)
                        
                        if lagu_artis:
                            print("\n" + "-"*50)
                            print(f" DAFTAR LAGU DARI {artis_dipilih.upper()}")
                            print("-"*50)
                            for i, lagu in enumerate(lagu_artis, 1):
                                print(f"  {i}. {lagu}")
                            print("-"*50)
                            
                            indeks_lagu = int(input("Pilih lagu (nomor): ")) - 1
                            if 0 <= indeks_lagu < len(lagu_artis):
                                lagu_dipilih = lagu_artis[indeks_lagu]
                                print("\n" + "*"*50)
                                print(f"  ▶ Memutar: {lagu_dipilih}")
                                print(f"    Artis  : {artis_dipilih}")
                                print("*"*50)
                                daftar_lagu_terputar.append(f"{lagu_dipilih} - {artis_dipilih}")
                            else:
                                print("\n❌ Pilihan tidak valid.")
                        else:
                            print(f"\n❌ Tidak ada lagu untuk artis {artis_dipilih}.")
                    else:
                        print("\n❌ Pilihan tidak valid.")
                else:
                    print("\n❌ Artis tidak ditemukan.")
            
            else:
                print("Pilihan tidak valid.")
            
            # Tampilkan lagu yang terakhir diputar
            if daftar_lagu_terputar:
                print("\n" + "-"*50)
                print(" "*10 + "RIWAYAT PEMUTARAN TERAKHIR")
                print("-"*50)
                print("  ▶ " + daftar_lagu_terputar[-1])
                print("-"*50)
            
            input("\nTekan Enter untuk kembali ke menu utama...")
            
        elif pilihan == "2":
            print("\n" + "="*50)
            print(" "*5 + "TERIMA KASIH TELAH MENGGUNAKAN PROGRAM")
            print(" "*15 + "PEMUTAR MUSIK")
            print("="*50)
            break
        
        else:
            print("\n❌ Pilihan tidak valid. Silakan coba lagi.")

if __name__ == "__main__":
    main()
